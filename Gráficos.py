# -*- coding: utf-8 -*-
"""gráficos =)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MFeyubBfoBJr_e3tYp5hTwZ5VaPZtmp2
"""

# cargar librerÃ­as
import pandas as pd
import cufflinks as cf
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import webbrowser

cf.set_config_file(theme = "white")

# definir funciones
def load_data(file_path):
    try:
        data = pd.read_excel(file_path, header = 3)
        return data
    except Exception as e:
        print(f"Error al cargar la data de {file_path}: {e}")
        return None

# copiar ruta de los archivos
siniestros_path =  "/content/BBDD ONSV - SINIESTROS 2021-2023.xlsx"# modificar segÃºn sea necesario
vehiculos_path = "/content/BBDD ONSV - VEHICULOS 2021-2023.xlsx" # modificar segÃºn sea necesario

# cargar datos
siniestros = load_data(siniestros_path)
vehiculos = load_data(vehiculos_path)


# limpiar siniestros 'CÓDIGO SINIESTRO'
siniestros = siniestros.drop_duplicates(subset = 'CÓDIGO SINIESTRO', keep = 'first')
#print(siniestros.shape)
#print(vehiculos.columns)

# seleccionar columnas de interÃ©s
siniestros = siniestros[['CÓDIGO SINIESTRO', 'FECHA SINIESTRO', 'HORA SINIESTRO', 'CLASE SINIESTRO', 'DEPARTAMENTO', 'PROVINCIA', 'DISTRITO', 'TIPO DE VÍA', 'COORDENADAS LATITUD', 'COORDENADAS  LONGITUD', 'CONDICIÓN CLIMÁTICA', 'SUPERFICIE DE CALZADA', 'CAUSA FACTOR PRINCIPAL']]
vehiculos = vehiculos[['CÓDIGO SINIESTRO', 'VEHÍCULO', 'MES', 'DÍA', 'HORA', 'AÑO']]

# realizar merge entre siniestros y vehÃ­culos
vehiculos_siniestros = pd.merge(siniestros, vehiculos, on = 'CÓDIGO SINIESTRO', how = 'inner')
#print(vehiculos_siniestros.shape)

tipo_via= vehiculos_siniestros.groupby("TIPO DE VÍA")["CÓDIGO SINIESTRO"].count().reset_index()

tipo_via.columns = ["TIPO DE VÍA", "NUM_SINIESTROS"]

dashboard = make_subplots(rows = 1, cols = 1, specs = [[{"type": "pie"}]]
                          )

dashboard.add_trace( go.Pie(
    labels = tipo_via["TIPO DE VÍA"],
    values = tipo_via["NUM_SINIESTROS"]),
                     row = 1, col = 1
)

dashboard.update_traces(
    textfont_size=15,
     hovertemplate = """
    Tipo de vía: %{label} <br> <b>Número de siniestros: %{value}</b>
    <extra></extra>
"""

    )
dashboard.update_layout(
      title={
        'text': "Distribución de los tipo de vía",
        'x': 0.5,
        'y': 0.9,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)
dashboard.show()

YEAR=[]

for i in siniestros['FECHA SINIESTRO']:
    elem_year=i[6:]
    YEAR.append(elem_year)

siniestros["AÑO"]=YEAR



#### departamento: Lima
Lima_siniestros = siniestros[siniestros["DEPARTAMENTO"] == "LIMA"]
Lima_siniestros["CLIMA AGRUPADO"] = Lima_siniestros["CONDICIÓN CLIMÁTICA"].replace({
    "NUBLADO": "NUBLADO-NIEBLA",
    "NIEBLA": "NUBLADO-NIEBLA"
})
Lima_siniestros["SINIESTRO AGRUPADO"] = Lima_siniestros["CLASE SINIESTRO"].replace({
    "CHOQUE CON OBJETO FIJO": "CHOQUE FUGA-OBJETO FIJO",
    "CHOQUE FUGA": "CHOQUE FUGA-OBJETO FIJO",
    "ESPECIAL": "OTROS",
    "INCENDIO": "OTROS",
    "VOLCADURA": "OTROS",
    "CAÍDA DE PASAJERO": "OTROS"
})

clima_tipoL = Lima_siniestros.pivot_table(index = "CLIMA AGRUPADO", columns = "SINIESTRO AGRUPADO", values = "CÓDIGO SINIESTRO", aggfunc = "count")
text = [[str(cell) for cell in row] for row in clima_tipoL.values]



fig1 = go.Figure(data = go.Heatmap(
    x = clima_tipoL.columns,
    y = clima_tipoL.index,
    z = clima_tipoL.values,
    text = text,
    texttemplate = "%{text}",
    colorscale = "Greens",
    colorbar = dict(title = "Cantidad de siniestros")
))

fig1.update_layout(
    title = "Relación entre el tipo de siniestro y la condición climática en Lima",
    xaxis_title = "Tipo de siniestro",
    yaxis_title = "Clima",
    width=800,
    height=500
)

fig1.update_traces(
    hovertemplate = "Tipo de siniestro: %{x} <br> Clima: %{y} <br> <b> Cantidad: %{z}</b> <extra> </extra> "
)

fig1.show()


##### departamento: La Libertad
LL_siniestros = siniestros[siniestros["DEPARTAMENTO"] == "LA LIBERTAD"]
LL_siniestros["SINIESTRO AGRUPADO"] = LL_siniestros["CLASE SINIESTRO"].replace({
    "ESPECIAL": "OTROS",
    "VOLCADURA": "OTROS",
    "CAÍDA DE PASAJERO": "OTROS"
})


# pivotear tabla por clima y tipo de siniestro
clima_tipoLL = LL_siniestros.pivot_table(index = "CONDICIÓN CLIMÁTICA", columns = "SINIESTRO AGRUPADO", values = "CÓDIGO SINIESTRO", aggfunc = "count")

text = [[str(cell) for cell in row] for row in clima_tipoLL.values]
fig2 = go.Figure(data = go.Heatmap(
    x = clima_tipoLL.columns,
    y = clima_tipoLL.index,
    z = clima_tipoLL.values,
    text = text,
    texttemplate = "%{text}",
    colorscale = "Blues",
    colorbar = dict(title = "Cantidad de siniestros")
))

fig2.update_layout(
    title = "Relación entre el tipo de siniestro y la condición climática en La Libertad",
    xaxis_title = "Tipo de siniestro",
    yaxis_title = "Clima",
    width=800,
    height=450
)

fig2.update_traces(
    hovertemplate = "Tipo de siniestro: %{x} <br> Clima: %{y} <br> <b> Cantidad: %{z}</b> <extra> </extra> "
)

fig2.show()

from scipy.stats import gmean
### atropello y choque en lima por años
atropello_lima = siniestros[(siniestros["DEPARTAMENTO"] == "LIMA") & (siniestros["CLASE SINIESTRO"] == "ATROPELLO")& (siniestros["CONDICIÓN CLIMÁTICA"] == "DESPEJADO") ]
atropello_lima = atropello_lima.groupby("AÑO")["CÓDIGO SINIESTRO"].count().reset_index()
atropello_lima.columns = ["AÑO", "CANTIDAD"]
c_atropello_lima =  list(atropello_lima["CANTIDAD"])


choque_lima = siniestros[(siniestros["DEPARTAMENTO"] == "LIMA") & (siniestros["CLASE SINIESTRO"] == "CHOQUE")& (siniestros["CONDICIÓN CLIMÁTICA"] == "DESPEJADO")]
choque_lima = choque_lima.groupby("AÑO")["CÓDIGO SINIESTRO"].count().reset_index()
choque_lima.columns = ["AÑO", "CANTIDAD"]
c_choque_lima =  list(choque_lima["CANTIDAD"])


fuga_lima = siniestros[(siniestros["DEPARTAMENTO"] == "LIMA") & (siniestros["CLASE SINIESTRO"] == "ATROPELLO FUGA")& (siniestros["CONDICIÓN CLIMÁTICA"] == "DESPEJADO")]
fuga_lima = fuga_lima.groupby("AÑO")["CÓDIGO SINIESTRO"].count().reset_index()
fuga_lima.columns = ["AÑO", "CANTIDAD"]
c_fuga_lima =  list(fuga_lima["CANTIDAD"])



# Calcular la tasa promedio de crecimiento o decrecimiento
def tasa_promedio(serie):
    tasa_01 = round(serie[1] / serie[0], 6)
    tasa_02 = round(serie[2] / serie[1], 6)

    tasas = [tasa_01, tasa_02]
    media_geom = gmean(tasas)
    tasa_promedio = (media_geom - 1) * 100
    return tasa_promedio

# Calcular valor final proyectado
def valor_final(valor_inicial, tasa_promedio_percent, n):
    tasa_decimal = tasa_promedio_percent / 100
    val_fin = valor_inicial * (1 + tasa_decimal) ** n
    return val_fin

# Generar valores proyectados para los próximos 3 años
def valores_proyecciones(serie,tasa):

    valor_2024 = int(valor_final(serie[-1], tasa, 1))
    valor_2025 = int(valor_final(valor_2024, tasa, 1))
    valor_2026 = int(valor_final(valor_2025, tasa, 1))

    eje_y=[int(serie[0]),int(serie[1]),int(serie[2]),valor_2024,valor_2025,valor_2026]

    return eje_y

print( tasa_promedio(c_atropello_lima))
print( tasa_promedio(c_choque_lima))
print( tasa_promedio(c_fuga_lima))

eje_y_1= valores_proyecciones(c_atropello_lima, tasa_promedio(c_atropello_lima))
eje_y_2 = valores_proyecciones(c_choque_lima, tasa_promedio(c_choque_lima))
eje_y_3 =valores_proyecciones(c_fuga_lima, tasa_promedio(c_fuga_lima))
annios = [2021, 2022, 2023, 2024, 2025, 2026]

fig3 = go.Figure( data = go.Scatter(
    x = annios,
    y = eje_y_1,
    name = "Atropello",
    mode = "lines+markers",

))

fig3.add_trace( go.Scatter(
    x = annios,
    y = eje_y_2,
    name = "Choque",
    mode = "lines+markers",

))
fig3.add_trace( go.Scatter(
    x = annios,
    y = eje_y_3,
    name = "Atropello fuga",
    mode = "lines+markers",

))

fig3.update_layout(
    title = {'text': "Evolución de atropellos, choques y atropellos fuga en Lima con un clima despejado",'x' : 0.5},
    xaxis_title = "Año",
    yaxis_title = "Cantidad",
      width=800,
    height=500,
        legend=dict(
        orientation="h",
        yanchor="bottom",
        xanchor="center",
        x = 0.5,
        y = -0.2
    )
)

fig3.update_traces(
    hovertemplate = "Año: %{x} <br> <b> Cantidad: %{y} </b> <extra> </extra>"
)

fig3.show()

# choque y despiste por años en La Libertad
choque_ll = siniestros[(siniestros["DEPARTAMENTO"] == "LA LIBERTAD") & (siniestros["CLASE SINIESTRO"] == "CHOQUE")& (siniestros["CONDICIÓN CLIMÁTICA"] == "DESPEJADO")]
choque_ll = choque_ll.groupby("AÑO")["CÓDIGO SINIESTRO"].count().reset_index()
choque_ll.columns = ["AÑO", "CANTIDAD"]
c_choque_ll =  list(choque_ll["CANTIDAD"])


despiste_ll = siniestros[(siniestros["DEPARTAMENTO"] == "LA LIBERTAD") & (siniestros["CLASE SINIESTRO"] == "DESPISTE")& (siniestros["CONDICIÓN CLIMÁTICA"] == "DESPEJADO")]
despiste_ll = despiste_ll.groupby("AÑO")["CÓDIGO SINIESTRO"].count().reset_index()
despiste_ll.columns = ["AÑO", "CANTIDAD"]
c_despiste_ll =  list(despiste_ll["CANTIDAD"])

eje_y_4= valores_proyecciones(c_choque_ll, tasa_promedio(c_choque_ll))
eje_y_5 = valores_proyecciones(c_despiste_ll, tasa_promedio(c_despiste_ll))

print(tasa_promedio(c_choque_ll))
print(tasa_promedio(c_despiste_ll))
fig4 = go.Figure( data = go.Scatter(
    x = annios,
    y = eje_y_4,
    name = "Choque",
    mode = "lines+markers",

))

fig4.add_trace( go.Scatter(
    x = annios,
    y = eje_y_5,
    name = "Despiste",
    mode = "lines+markers",

))

fig4.update_layout(
    title = {'text': "Evolución de choques y despistes en La Libertad con un clima despejado",'x' : 0.5},
    xaxis_title = "Año",
    yaxis_title = "Cantidad",
      width=800,
    height=500,
        legend=dict(
        orientation="h",
        yanchor="bottom",
        xanchor="center",
        x = 0.5,
        y = -0.2
    )
)

fig4.update_traces(
    hovertemplate = "Año: %{x} <br> <b> Cantidad: %{y} </b> <extra> </extra>"
)

fig4.show()